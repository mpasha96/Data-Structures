#include <stdio.h>
#include <stdlib.h>

/* run this program using the console pauser or add your own getch, system("pause") or input loop */

struct node{
	int data;
	struct node *left;
	struct node *right;
	int height;

};

int max(int a , int b);
int height(struct node *N);
struct node *newnode(int data);
struct node *rightrotate(struct node* y);
struct node *leftrotate(struct node* x);
int getbalance(struct node *N);
struct node *insert(struct node *node, int data);
struct node *minvalnode(struct node *node);
struct node *delnode(struct node *root, int data);
void preOrder(struct node *root);

int max(int a , int b)
{
	if (a>b) return a;
	else return b;
}

int height(struct node *N)
{
	if (N==NULL)
	return 0;
	else return N->height;
}

struct node *newnode(int data)
{
	struct node *node=(struct node*)malloc(sizeof(struct node));
	node->data=data;
	node->right=NULL;
	node->left=NULL;
	node->height=1;
	return node;
}

struct node *rightrotate(struct node* y)
{
	struct node *x=y->left;
	struct node *temp = x->right;
	
	x->right=y;
	y->left= temp;
	
	x->height=max(height(x->left),height(x->right))+1;
	y->height=max(height(y->left),height(y->right))+1;
	
	return x;
}

struct node *leftrotate(struct node* x)
{
	struct node *y=x->right;
	struct node *temp = y->left;
	
	y->left=x;
	x->right= temp;
	
	x->height=max(height(x->left),height(x->right))+1;
	y->height=max(height(y->left),height(y->right))+1;
	
	return y;
}


int getbalance(struct node *N)
{
	if(N==NULL)
	{
			return 0;
	}
	

	return (height(N->left)-height(N->right));
}

struct node *insert(struct node *node, int data)
{
	if (node==NULL)
	return (newnode(data));
	
	else if (data>node->data)
	{
		node->right=insert(node->right,data);
	}
	
	else //if(data<node->data)
	{
		node->left=insert(node->left,data);
	}
	
	node->height=max(height(node->left), height(node->right)) + 1;
	
	int bf=getbalance(node);
	
	// Left Left Case
    if (bf > 1 && data < node->left->data)
        return rightrotate(node);
 
    // Right Right Case
    if (bf < -1 && data > node->right->data)
        return leftrotate(node);
 
    // Left Right Case
    if (bf > 1 && data > node->left->data)
    {
        node->left =  leftrotate(node->left);
        return rightrotate(node);
    }
 
    // Right Left Case
    if (bf < -1 && data < node->right->data)
    {
        node->right = rightrotate(node->right);
        return leftrotate(node);
    }
 
    return node;
	
}

struct node *minvalnode(struct node *node)
{
	struct node *current=node;
	while(current->left!=0)
	{
		current=current->left;
		
	}
	return current;
}

struct node *delnode(struct node *root, int data)
{
	if (root==NULL)
	{
		return root;
	}
	
	if (data<root->data)
	{
			root->left=delnode(root->left,data);
	}
	else if (data>root->data)
	{
		root->right=delnode(root->right,data);
	}
	else
	{
		if( (root->left == NULL) || (root->right == NULL) )
		{
			struct node *temp = root->left ? root->left : root->right;
			
			if(temp == NULL)
            {
                temp = root;
                root = NULL;
            }
            else 
             *root = *temp; 
 
            free(temp);
		}
		else
		{
			struct node* temp = minvalnode(root->right);
 
            
            root->data = temp->data;
            root->right = delnode(root->right, temp->data);
		}
		
	}
	
    if (root == NULL)
      return root;
    
    root->height = max(height(root->left), height(root->right)) + 1;
 
    int balance = getbalance(root);
 
    // Left Left Case
    if (balance > 1 && getbalance(root->left) >= 0)
        return rightrotate(root);
 
    // Left Right Case
    if (balance > 1 && getbalance(root->left) < 0)
    {
        root->left =  leftrotate(root->left);
        return rightrotate(root);
    }
 
    // Right Right Case
    if (balance < -1 && getbalance(root->right) <= 0)
        return leftrotate(root);
 
    // Right Left Case
    if (balance < -1 && getbalance(root->right) > 0)
    {
        root->right = rightrotate(root->right);
        return leftrotate(root);
    }
 
    return root;
	
	
}

void preOrder(struct node *root)
{
    if(root != NULL)
    {
        printf("%d ", root->data);
        preOrder(root->left);
        preOrder(root->right);
    }
}


int main(int argc, char *argv[]) {
	
	struct node *root = NULL;
	root = insert(root, 9);
    root = insert(root, 5);
    root = insert(root, 10);
    root = insert(root, 0);
    root = insert(root, 6);
    root = insert(root, 11);
    root = insert(root, -1);
    root = insert(root, 1);
    root = insert(root, 2);
    printf("Pre order traversal of the constructed AVL tree is \n");
	preOrder(root);
	root = delnode(root, 10);
	printf("\nPre order traversal after deletion of 10 \n");
	preOrder(root);
	return 0;
}