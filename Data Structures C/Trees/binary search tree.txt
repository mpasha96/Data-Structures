#include <stdio.h>
#include <stdlib.h>

struct bstnode{
    int data;
    struct bstnode *left;
    struct bstnode *right;

};

struct bstnode* createnode(int data)
{
    struct bstnode* newnode = (struct bstnode *)malloc(sizeof(struct bstnode));
    newnode->data=data;
    newnode->left=NULL;
    newnode->right=NULL;
    return newnode;
};

void insert(struct bstnode** root,int vti)
{

    if(*root==NULL)
    {
        *root =createnode(vti);
    }
    else if(vti>(*root)->data)
    {
        insert(&((*root)->right),vti);
    }else if(vti<(*root)->data)
    {
        insert(&((*root)->left),vti);
    }
}

void search(struct bstnode** root,int vts)
{
    if(vts ==(*root)->data)
    {
        printf("value found");
    }
    else if(vts>(*root)->data && (*root)->right!=NULL )
    {
        search(&((*root)->right),vts);
    }
    else if(vts<(*root)->data && (*root)->left!=NULL)
    {
        search(&((*root)->left),vts);
    }
    else
    {
            printf("value not found");
    }
}

void inorder(struct bstnode *bt)
{
 if(bt!=NULL)
 {
  inorder(bt->left);
  printf("%d\t",bt->data);
  inorder(bt->right);
 }
}

void preorder(struct bstnode *bt)
{
 if(bt!=NULL)
 {
    printf("%d\t",bt->data);
    preorder(bt->left);
    preorder(bt->right);
 }
}

void postorder(struct bstnode *bt)
{
 if(bt!=NULL)
 {
    postorder(bt->left);
    postorder(bt->right);
    printf("%d\t",bt->data);
 }
}

struct bstnode *findminnode(struct bstnode* root)
{
	while(root->left != NULL)
	{
        root = root->left;
	}
	return root;
}

int findmin(struct bstnode* root)
{
    if(root==NULL)
    {
        return -1;
    }
    else if(root->left==NULL)
    {
        return root->data;
    }
    return findmin(root->left);
}

int findmax(struct bstnode* root)
{
    if(root==NULL)
    {
        return -1;
    }
    else if(root->right==NULL)
    {
        return root->data;
    }
    return findmax(root->right);
}

int findheight(struct bstnode* root)
{
    if(root==NULL)
        return -1;
    return max(findheight(root->left),findheight(root->right))+1;
}

int max(int a, int b)
{
    if (a>b)
        return a;
    return b;
}

struct bstnode* del(struct bstnode* root, int vtd)
{
    if (root==NULL)
        return root;
    else if(vtd<root->data)
        root->left=del(root->left,vtd);
    else if (vtd>root->data)
        root->right=del(root->right,vtd);
    else
    {
        //case 1: no child:
        if(root->left == NULL && root->right == NULL) {
			free(root);
			root = NULL;
		}
		//Case 2: One child
		else if(root->left == NULL) {
			struct bstnode *temp = root;
			root = root->right;
			free(temp);
		}
		else if(root->right == NULL) {
			struct bstnode *temp = root;
			root = root->left;
			free(temp);
		}
		// case 3: 2 children
		else {
			struct bstnode* temp;
			temp = findminnode(root->right);
			root->data = temp->data;
			root->right=del(root->right,temp->data);
		}
    }
    return root;

}



int main()
{
    struct bstnode *root=NULL;

    insert(&root,3);
    insert(&root,5);
    insert(&root,77);
    insert(&root,23);
    insert(&root,27);
    insert(&root,22);
    inorder(root);
    printf("\n");
    
    root = del(root,22);
    inorder(root);
    printf("\n");
    preorder(root);
    printf("\n");
    postorder(root);
    printf("\n");

    int x =findmin(root);
    printf("\n %d \n",x);
    int y =findmax(root);
    printf("\n %d \n",y);
    int z = findheight(root);
    printf("\n %d \n",z);

    search(&root,22);
    printf("\n");
    search(&root,1);


    return 0;
}
