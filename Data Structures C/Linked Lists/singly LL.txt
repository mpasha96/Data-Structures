#include <stdio.h>
#include <stdlib.h>


struct NODE {
int data;
struct NODE *next;
};

void insert(struct NODE **start,int vti);
void insertAtEnd(struct NODE **start,int value);
void insertAtBeg(struct NODE **start,int value);
void printList(struct NODE *start);
void deleteAll(struct NODE **start);
int search(struct NODE *start,int vts);
void sort(struct NODE **start);
void sortedInsert(struct NODE **start,int value);

int main() {


	struct NODE *start=NULL;

	insert(&start,5);
    insert(&start,3);
	insert(&start,99);
	insert(&start,2);
	insert(&start,7);
	
	insertAtBeg(&start,1);
	insertAtEnd(&start,10);

	printList(start);
	
    sort(&start);
    
    del(&start,5);
    
    printList(start);
    
	deleteAll(&start);
	
	insert(&start,5);
	
    printList(start);
    
    int i=search(start,5);
    if(i==1) printf("\n found !!!");
    else printf("\n not found !!!");

	return 0;
}

void insert(struct NODE **start,int vti)
{
		struct NODE *temp = (struct NODE*)malloc(sizeof(struct NODE));
		temp->data=vti;
        temp->next=NULL;
		if(*start==NULL)
		{
			*start=temp;
		}
		else
		{
			struct NODE *curr=*start;
			while(curr->next!=NULL)
			{
			  	curr=curr->next;
			}
			curr->next=temp;



		}




}
void printList(struct NODE *start)
{
	printf("\n List is : ");
	while(start!=NULL)
	{
		printf(" %d ",start->data);
		start=start->next;
	}
}

void del(struct NODE **start,int vtd)//vtd=value to delete
{

	if((*start)->data==vtd)
	{

		struct NODE *temp=*start;
		*start=(*start)->next;
		free(temp);
	}
	else
	{
		struct NODE *curr=(*start)->next;
		struct NODE *prev=*start;
		while(curr->data!=vtd)
		{
			curr=curr->next;
			prev=prev->next;
		}

		prev->next=curr->next;
		free(curr);

	}
}

void deleteAll(struct NODE **start)
{
	while((*start)!=NULL)
	{
		struct NODE *temp=*start;
		*start=(*start)->next;
		free(temp);

	}
}

int search(struct NODE *start,int vts)
{
	while(start!=NULL )
	{
	if((start)->data==vts)
	{
		return 1;
	}
		start=start->next;
	}
	return 0;
}

void sort(struct NODE **start)
{
		struct NODE *temp1,*temp2;
        temp1=*start;
		temp2=(*start);
        while(temp2!=NULL)
	{

        temp1=temp2;
		while((temp1)!=NULL)
	{
		if(temp1->data < temp2->data)
		{
			int t=temp1->data;
			temp1->data=temp2->data;
			temp2->data=t;
		}
		temp1=temp1->next;
	}
		temp2=temp2->next;
	}

}

void insertAtBeg(struct NODE **start,int value)
{
	struct NODE *temp=(struct NODE *)malloc(sizeof(struct NODE));
	temp->data=value;
	temp->next=*start;
	*start=temp;
}

void insertAtEnd(struct NODE **start,int value)
{
	struct NODE *temp=(struct NODE *)malloc(sizeof(struct NODE));
	temp->data=value;
	temp->next=NULL;

	struct NODE *current=*start;
	while(current->next!=NULL)
	{
		current=current->next;
	}
	current->next=temp;



}
void sortedInsert(struct NODE **start,int value)
{
	struct NODE *temp=(struct NODE *)malloc(sizeof(struct NODE));
	temp->next=NULL;
	temp->data=value;


	//get tail of linked list
	struct NODE *tail=*start;
	if((*start)!=NULL)// do not get tail if linked list is sempty
	{

	while(tail->next!=NULL)
	{
		tail=tail->next;
	}
	}
	//end get tail

	if((*start)==NULL)
	{
		*start=temp;
	}
	else if(value < (*start)->data)
	{
		insertAtBeg(start,value);
	}
	else if(value > tail->data )
	{
		insertAtEnd(start,value);
	}
	else
	{
		struct NODE *current=*start;
		while(value > current->next->data)
		{
			current=current->next;
		}
		temp->next=current->next;
		current->next=temp;
	}



}



